<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Mac OS在线重装系统</title>
    <url>/2021/07/25/Mac%20OS%E5%9C%A8%E7%BA%BF%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>本文介绍用网络在线的方式来安装Mac OS系统，网络安装是指从苹果官网下载系统并安装，它只需要联网即可，不需要制作U盘启动等，比较方便快捷</p>
<h3 id="1-进入系统安装页"><a href="#1-进入系统安装页" class="headerlink" title="1. 进入系统安装页"></a>1. 进入系统安装页</h3><p>在按下电源键之后，按住<strong>Command+R</strong>（为防止错过，可以先按键，再开机），会进入【macOS实用工具】界面</p>
<h3 id="2-用磁盘工具格式化磁盘"><a href="#2-用磁盘工具格式化磁盘" class="headerlink" title="2. 用磁盘工具格式化磁盘"></a>2. 用磁盘工具格式化磁盘</h3><p>磁盘工具进行格式化不是必须的，如果是新电脑，从来没有对系统盘做过格式化，或者重装的时候，想清除原来所有的文件，才需要选择磁盘工具。</p>
<p>在实用工具页面，点击【磁盘工具】，在左侧选择设备，点击 抹掉，</p>
<ul>
<li>名称 ：Macintosh HD</li>
<li>格式： Mac OS 扩展（日志式）或APFS</li>
<li>方案：GUID分区图</li>
</ul>
<p>点击抹掉，开始格式化，然后退出磁盘工具</p>
<span id="more"></span>

<blockquote>
<p>查看本机文件系统格式的方法：关于本机-概述-系统报告-储存</p>
</blockquote>
<h3 id="3-在线下载和安装"><a href="#3-在线下载和安装" class="headerlink" title="3. 在线下载和安装"></a>3. 在线下载和安装</h3><p>返回到实用工具主界面，选择【重新安装MacOS】，下一步，选择要安装的硬盘，点击安装，接下来就是漫长的下载和自动安装过程。<strong>务必要保证网络连通</strong>，看右上角网络的状态。</p>
<h3 id="4-系统常规设置"><a href="#4-系统常规设置" class="headerlink" title="4. 系统常规设置"></a>4. 系统常规设置</h3><p>一般默认就可以。</p>
<p>苹果键盘布局，选择美式英文，不选中文</p>
<p>输入法先默认ABC输入法，后面可以下载搜狗输入法</p>
<h3 id="5-遇到的问题"><a href="#5-遇到的问题" class="headerlink" title="5. 遇到的问题"></a>5. 遇到的问题</h3><ol>
<li><p>点击重置系统后，下一步，出现一个带问号的磁盘，不能点继续</p>
<p>说明磁盘没有格式化，需要进行格式化</p>
</li>
<li><p>点击安装系统，会报服务端错误</p>
<p>看右上角 wifi的信号是否连接，网上很多说是本地时间不对，和服务端校对不通过导致，但我的情况是因为网络没有连通，重新连接下就好了。进入系统时，虽然已经连接过，在这里还要再连接一次。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>Mac OS</tag>
        <tag>系统安装</tag>
      </tags>
  </entry>
  <entry>
    <title>加入新项目，如何快速阅读App源码</title>
    <url>/2021/09/12/%E5%8A%A0%E5%85%A5%E6%96%B0%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E9%98%85%E8%AF%BBApp%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<p>做移动端开发，难免会因工作变动，加入一个新的项目组。而到了新项目组，首先要面临一个必备工作，<strong>阅读项目源码</strong>。如何有条理、快速的了解新项目的架构和业务，分享自己的一些心得。</p>
<p>应用代码可以分层来阅读，比如分成<strong>界面展示层</strong>、<strong>逻辑控制层</strong>和<strong>业务数据层</strong>，也就是Model-View-Controller/Presenter分层结构，在每层借助的工具和阅读的重点各有不同，下面分别介绍</p>
<span id="more"></span>

<h2 id="界面展示层"><a href="#界面展示层" class="headerlink" title="界面展示层"></a>界面展示层</h2><blockquote>
<p>借助工具：logcat和Layout Inspector</p>
</blockquote>
<p>页面UI是最直观的视觉元素，是业务功能的具体表现，也是阅读项目源码很好的入口，Android中的UI主要是由Activity、Fragment、View等组件构成的，了解的顺序也是从Activity、Fragment再到具体的View。</p>
<h4 id="动手操作业务主流程，了解页面之间的跳转（Activity层次）"><a href="#动手操作业务主流程，了解页面之间的跳转（Activity层次）" class="headerlink" title="动手操作业务主流程，了解页面之间的跳转（Activity层次）"></a>动手操作业务主流程，了解页面之间的跳转（Activity层次）</h4><p>业务主流程是指app主打功能，比如，如果是购物app，就是浏览-&gt;加购-&gt;下单-&gt;支付，如果是短视频app，就是浏览-&gt;发帖。在Android Studio（以下简称AS）中打开logcat，过滤”displayed “ 关键字，然后操作主流程，看下依次经历哪些Activity的切换，分别记录下来。</p>
<p><img src="/images/%E5%8A%A0%E5%85%A5%E6%96%B0%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E9%98%85%E8%AF%BBApp%E6%BA%90%E7%A0%81/logcat-displayed.png" alt="logcat-displayed"></p>
<h4 id="分析每个页面的布局组织层次（View层次）"><a href="#分析每个页面的布局组织层次（View层次）" class="headerlink" title="分析每个页面的布局组织层次（View层次）"></a>分析每个页面的布局组织层次（View层次）</h4><p>在上一步中记录的各个Activity，还需要分析它们的页面布局，是一个RecycleView组成的滑动列表，还是一个ViewPager构成的tab切换，还是多个Fragment的嵌套，在AS中打开Layout Inspector来分析页面结构，查看各个View层次结构，对整个页面结构有个整体认识，同时找到对应的布局xml文件。找xml文件，可以在Activity和Fragment直接搜索R.layout.，或者根据前面Inspector，可以根据自定义view类名，或者view id来全局搜索。</p>
<p><img src="/images/%E5%8A%A0%E5%85%A5%E6%96%B0%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E9%98%85%E8%AF%BBApp%E6%BA%90%E7%A0%81/layoutinspector.png" alt="layoutinspector"></p>
<h2 id="逻辑控制层"><a href="#逻辑控制层" class="headerlink" title="逻辑控制层"></a>逻辑控制层</h2><blockquote>
<p>借助工具：Android Studio Debug</p>
</blockquote>
<p>逻辑控制层介于界面层和数据层之间，主要负责业务流程的轮转，类名大多为XXController或者XXPresenter，XXManager等等。从Activity找到布局按钮，在它的onClick中断点来一步步调试、跟进。</p>
<p>断点有两种方式，一种是入口处，比如onClick，来跟踪后面的处理。一种是出口或者关卡处，比如bindData，但是不知道从哪里来触发，在出口处断点，往上去找。AS中断点堆栈可以复制下来，方便做流程时序图用。</p>
<p><img src="/images/%E5%8A%A0%E5%85%A5%E6%96%B0%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E9%98%85%E8%AF%BBApp%E6%BA%90%E7%A0%81/%E8%B0%83%E8%AF%95.png" alt="调试"></p>
<p>通常逻辑层中，会涉及到一些消息的传递，比如广播，event事件总线，Message，这些都是基于观察者模式，并且是异步的，无法顺序跟踪，不是很方便。可以多用shift+F全局搜索，比如搜索Action，找到广播接受者，通过event id，来找到订阅者、通过Message what，找到Handler处理者。</p>
<p>还有很多时候，会通过callback或者listener来回调到UI层，多注意下这些对象。</p>
<h2 id="业务数据层"><a href="#业务数据层" class="headerlink" title="业务数据层"></a>业务数据层</h2><blockquote>
<p> 借助工具：抓包charles</p>
</blockquote>
<p>数据的来源有网络、数据库、内存，文件。一般Java对象命名为XXDao，XXProvider，XXCache</p>
<p>对于网络数据，可以通过charles抓包工具，知道接口名，返回数据格式，并对数据进行以下分析，</p>
<ul>
<li>入参有哪些</li>
<li>是增量数据还是全量数据</li>
<li>有没有一些固定的协议，协议各个字段代码的含义</li>
<li>哪些是业务数据，哪些是埋点、实验等数据</li>
</ul>
<p>然后再来找数据的解析器，是怎样把原始数据一步步转换成ui对象的，有没有对数据做额外处理，各种数据对象表示的含义是什么，相互之间的关系</p>
<h2 id="其他模块"><a href="#其他模块" class="headerlink" title="其他模块"></a>其他模块</h2><p>除了上面列出的3个方面，其实app中还包含很多其他模块比如</p>
<ul>
<li><p>埋点：业务是怎样埋点的，页面埋点，点击埋点，曝光埋点，自定义埋点是怎样区分的</p>
</li>
<li><p>图片库和视频：图片库怎样使用，怎样加载动图，视频组件是怎样使用的</p>
</li>
<li><p>实验：怎样激活实验，验证实验效果</p>
</li>
<li><p>开关：端上的开关怎样使用</p>
</li>
</ul>
<h2 id="反编译利器"><a href="#反编译利器" class="headerlink" title="反编译利器"></a>反编译利器</h2><p>现在都是组件化开发，有些三方aar接入，Android studio不容易搜索到源码，可以借助反编译工具jadx</p>
<blockquote>
<p>借助工具：jadx</p>
</blockquote>
<p>根据类名、字符串来进行全局搜索，</p>
<p><img src="/images/%E5%8A%A0%E5%85%A5%E6%96%B0%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E9%98%85%E8%AF%BBApp%E6%BA%90%E7%A0%81/%E5%8F%8D%E7%BC%96%E8%AF%91%E6%90%9C%E7%B4%A2.png" alt="反编译搜索"></p>
<p>右键通过查看声明，来找到定义的地方，查看用例，来找到使用的地方，顺着引用链路，来一层层找到调用地方。</p>
<p><img src="/images/%E5%8A%A0%E5%85%A5%E6%96%B0%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E9%98%85%E8%AF%BBApp%E6%BA%90%E7%A0%81/%E5%8F%8D%E7%BC%96%E8%AF%91%E6%9F%A5%E6%89%BE%E7%94%A8%E4%BE%8B.png" alt="反编译查找用例"></p>
<h2 id="带着问题去阅读"><a href="#带着问题去阅读" class="headerlink" title="带着问题去阅读"></a>带着问题去阅读</h2><p>在阅读之前，先提出几个问题，列出list，然后逐个解决，顺着问题来阅读，不至于迷失方向，没有目标。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>App</tag>
        <tag>源码</tag>
        <tag>新项目</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>在Centos上搭建shadowsocks服务</title>
    <url>/2021/04/05/%E5%9C%A8Centos%E4%B8%8A%E6%90%AD%E5%BB%BAshadowsocks%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<p>在搬瓦工上新购买的vps，系统默认安装的是centos7，所以下面教程是以Centos7为例，如果是Ubuntu，将yum换成apt-get即可</p>
<h4 id="1-首先安装epel扩展源，相当于第三方源，官方源比较滞后，会导致后面安装pip，提示-No-package-python-pip-available"><a href="#1-首先安装epel扩展源，相当于第三方源，官方源比较滞后，会导致后面安装pip，提示-No-package-python-pip-available" class="headerlink" title="1.首先安装epel扩展源，相当于第三方源，官方源比较滞后，会导致后面安装pip，提示-No-package-python-pip-available"></a>1.首先安装epel扩展源，相当于第三方源，官方源比较滞后，会导致后面安装pip，提示-No-package-python-pip-available</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure>

<h4 id="2-安装pip，pip-是-Python-的包管理工具"><a href="#2-安装pip，pip-是-Python-的包管理工具" class="headerlink" title="2. 安装pip，pip 是 Python 的包管理工具"></a>2. 安装pip，pip 是 Python 的包管理工具</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y python-pip</span><br></pre></td></tr></table></figure>

<p>如果仍然出现报错信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Loaded plugins: fastestmirror, ovl</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">...</span><br><span class="line">No package python-pip available.</span><br><span class="line">Error: Nothing to do</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>是因为开启fastestmirror导致，修改方法如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) vi /etc/yum/pluginconf.d/fastestmirror.conf</span><br><span class="line">然后enable=0 // 由1改成0，即禁用该插件</span><br><span class="line"></span><br><span class="line">(2)清除缓存并重新构建yum 源</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line"></span><br><span class="line">(3) 重新执行pip安装</span><br><span class="line">yum -y install python-pip</span><br></pre></td></tr></table></figure>

<h4 id="3-升级pip"><a href="#3-升级pip" class="headerlink" title="3. 升级pip"></a>3. 升级pip</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install --upgrade pip</span><br></pre></td></tr></table></figure>

<h4 id="4-pip安装shadowsocks"><a href="#4-pip安装shadowsocks" class="headerlink" title="4.  pip安装shadowsocks"></a>4.  pip安装shadowsocks</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure>

<h4 id="5-创建shadowsocks配置文件"><a href="#5-创建shadowsocks配置文件" class="headerlink" title="5. 创建shadowsocks配置文件"></a>5. 创建shadowsocks配置文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/shadowsocks.json</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;server&quot;: &quot;::&quot;,  #监听所有的ipv4和ipv6地址</span><br><span class="line">  &quot;server_port&quot;: 8888, #服务器端口号，1025到65535任选一。</span><br><span class="line">  &quot;password&quot;: &quot;xxx&quot;, #设置登录密码。</span><br><span class="line">  &quot;timeout&quot;:300, #等待超时</span><br><span class="line">  &quot;method&quot;: &quot;rc4-md5&quot;, #加密方式，官方默认使用aes-256-cfb，推荐使用rc4-md5，因为 RC4比AES速度快</span><br><span class="line">  &quot;fast_open&quot;:true, #如果你的服务器 Linux 内核在3.7+，可以开启 fast_open 以降低延迟</span><br><span class="line">  &quot;workers&quot;: 3 #工作线程数，默认为1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看linux内核信息 <code>uname -r</code></p>
</blockquote>
<h4 id="6-启动shadowsocks"><a href="#6-启动shadowsocks" class="headerlink" title="6. 启动shadowsocks"></a>6. 启动shadowsocks</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d start</span><br></pre></td></tr></table></figure>

<blockquote>
<p>-d 表示后台运行</p>
</blockquote>
<p>还有两种常用的操作</p>
<ul>
<li>停止</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d stop</span><br></pre></td></tr></table></figure>

<ul>
<li>重启(如果修改了配置文件，需要重启服务才生效))</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d stop</span><br></pre></td></tr></table></figure>

<h4 id="7-启动成功后，用telnet查看端口是否打开"><a href="#7-启动成功后，用telnet查看端口是否打开" class="headerlink" title="7. 启动成功后，用telnet查看端口是否打开"></a>7. 启动成功后，用telnet查看端口是否打开</h4><p>打开cmd，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">telnet ip地址 端口号</span><br></pre></td></tr></table></figure>

<p>如果进入命令行，说明打开。如果提示 无法打开主机的连接，则说明未打开端口</p>
<blockquote>
<p>win7默认没有打开telnet服务，从控制面板-程序-打开或关闭Windows功能，勾选Telnet服务器和Telnet客户端</p>
</blockquote>
<h4 id="8-客户端安装Shadowsocks，设置IP地址、端口号，加密方式，访问www-google-com看是否能连接成功"><a href="#8-客户端安装Shadowsocks，设置IP地址、端口号，加密方式，访问www-google-com看是否能连接成功" class="headerlink" title="8.  客户端安装Shadowsocks，设置IP地址、端口号，加密方式，访问www.google.com看是否能连接成功"></a>8.  客户端安装Shadowsocks，设置IP地址、端口号，加密方式，访问<code>www.google.com</code>看是否能连接成功</h4><p>扩展阅读：Privoxy，BBR加速</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title>怎样报告一个合格的bug</title>
    <url>/2021/09/15/%E6%80%8E%E6%A0%B7%E6%8A%A5%E5%91%8A%E4%B8%80%E4%B8%AA%E5%90%88%E6%A0%BC%E7%9A%84bug/</url>
    <content><![CDATA[<p>开发中会碰到各种奇怪的bug，怎样有效高质量的报告一个bug，给开发提供更多的信息，便于排查和解决问题？可以有下面几个角度</p>
<ul>
<li><p>手机平台和型号</p>
<p>是Android还是iOS，毕竟现在是都是多端开发，由于两端不一致性，导致可能问题表现不同，所以先确定平台，方便找到对应的开发。手机的型号也很关键，像Android手机，不同厂家对ROM定制不同，而且不同版本系统本身就有差异，导致bug只在某厂商机型或者某个系统版本才能复现</p>
<span id="more"></span></li>
<li><p>app版本</p>
<p>app在迭代中，往往某个bug，只在某个版本才能复现，所以提供版本信息，方便看这个版本代码的改动点</p>
</li>
<li><p>问题发生的时间</p>
<p>发生时间是<strong>非常重要</strong>的信息，<strong>越精确越好</strong>，客户端根据时间，在日志中找到发生前后的上下文，服务端也可以根据它来找到当时用户请求的数据，时间还可以判断是否因为服务端发布造成的</p>
</li>
<li><p>用户id</p>
<p>用户id是用户的唯一标识，很多功能都是和用户绑定的，比如圈人群、实验分桶，借助这把钥匙，可以拿到更多的信息</p>
</li>
<li><p>业务域唯一性的id</p>
<p>除了用户id外，在某个业务域中总会有一个标识唯一性的id，比如请求id，订单id，商品id，帖子id，评论id，跳转链接，消息id等等，这些id都是和具体业务相关的，有了它，可以在对应业务域进一步缩小排查范围</p>
</li>
<li><p>发生概率</p>
<p>必现还是偶现，如果是必现的问题，都比较好解决。如果是偶现，偶现的概率多少，可以评估严重程度。基于发生概率，不断尝试复现</p>
</li>
<li><p>客户端日志</p>
<p>Android手机可以提供抓取日志的能力，看下应用打印日志中，有无报错和异常信息，或者根据页面和点击等事件，来确认用户是怎样操作复现的</p>
</li>
<li><p>复现路径</p>
<p>怎样复现的？在发生前做了哪些操作，有什么异常的现象，描述清楚。在解决问题后，也好能验证确实解决了。</p>
</li>
<li><p>用户类型</p>
<p>内测用户、白名单用户、还是线上用户，通常一些开发阶段的功能都会给用户加了白名单，但是这些新功能不太完善，导致用户反馈。</p>
</li>
<li><p>服务端最近有无发布</p>
<p>看问题发生时间，是否和服务端的某次发布有关。服务端是否在做压测，攻防演练等等</p>
</li>
<li><p>客户端最近有无灰度开关打开</p>
<p>问题发生时，端上是否有推灰度开关，导致之前关闭的功能被打开，引发连串问题</p>
</li>
<li><p>运营最近有无活动上线</p>
<p>每天都会有运营活动，有的活动是借助于push消息，会带来瞬时流量，导致问题爆发</p>
</li>
<li><p>网络环境</p>
<p>是3G还是WiFi，来依此判断是否弱网环境，可能因为网络性能差，导致页面白屏，请求超时等情况，造成用户舆情反馈</p>
</li>
<li><p>提供截图或者视频</p>
<p>一图胜千言，如果有图片和视频，最好能提供下，更容易的理解问题，减少沟通成本</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>新的开始</title>
    <url>/2021/04/05/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</url>
    <content><![CDATA[<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>用了两天时间，把博客升级为最新的NexT主题，发现样式更简洁，第三方功能更全，配置更为简单。从2016年毕业后，文章基本没有更新，还是一些之前零零散散的文章。这次借升级，也把之前陈旧的文章都删除，打算重新开始写。</p>
<h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>转眼毕业快5年，发现沉淀记录的不多。如果说前3年，还是以学习输入为主，那么从5年开始，应该有所输出，通过输出倒逼输入，也能锻炼自己文字总结和表达能力，以博客为载体，希望以后能多些记录和沉淀。</p>
<span id="more"></span>
<h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h2><p>以后，会在博客中记录Android技术，源码阅读，工作方法等方面的内容。文章以短文为主，内容较多的，要分成多给章节，方便碎片化的时间阅读，也不至于阅读枯燥。2021，一起加油~</p>
]]></content>
      <categories>
        <category>日志</category>
        <category>第一天</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>我的</tag>
      </tags>
  </entry>
  <entry>
    <title>聊聊解决问题的套路</title>
    <url>/2022/04/05/%E8%81%8A%E8%81%8A%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E7%9A%84%E5%A5%97%E8%B7%AF/</url>
    <content><![CDATA[<p>作为开发者，每天都会遇到新的问题，甚至于说我的工作就是<strong>不断的解决问题</strong>。碰到问题总会让人苦恼，怎样能快速的解决问题，在找不到思路的时候，能否有一些方法来知道，推进问题的解决，本文简单聊聊解决问题的常用套路，仅仅是自己的一些见解，期待有所共鸣。</p>
<p>一个问题从发现到解决的闭环，大致分成发现问题、分析问题、解决问题、总结问题等四个步骤，下面分别介绍</p>
<span id="more"></span>

<h2 id="1-发现问题"><a href="#1-发现问题" class="headerlink" title="1. 发现问题"></a>1. 发现问题</h2><h4 id="问题是什么"><a href="#问题是什么" class="headerlink" title="问题是什么"></a>问题是什么</h4><p>首先要能清楚的描述你的问题是什么，并提供必要的信息，比如</p>
<ul>
<li>问题的现象是什么：透过现象才能看到问题的本质，有截图或者视频最好</li>
<li>在什么场景下复现：在哪种场景下能复现，缩小问题排查的范围</li>
<li>是必现、大概率复现还是偶现：如果是稳定复现，可以根据复现路径，快速找到问题的原因</li>
<li>唯一性id：比如用户id，昵称等</li>
<li>关键性信息：比如发生时间，在WiFi还是移动网络下，有无日志信息和报错提示等</li>
</ul>
<p>问题描述的越清晰，提供的有用信息量越多，越有利于问题的解决。怎样合格的报告一个问题，可以参考前面写的<a href="https://skycrown.net/2021/09/15/%E6%80%8E%E6%A0%B7%E6%8A%A5%E5%91%8A%E4%B8%80%E4%B8%AA%E5%90%88%E6%A0%BC%E7%9A%84bug/">文章</a>。在求助别人时，要言简意赅的描述问题，如果描述不清楚，可以加上背景介绍，让别人能快速了解你的问题。</p>
<h2 id="2-分析问题"><a href="#2-分析问题" class="headerlink" title="2. 分析问题"></a>2. 分析问题</h2><p>分析问题是最为关键的一环，如果原因找到了，问题也能迎刃而解。</p>
<h4 id="改动了什么"><a href="#改动了什么" class="headerlink" title="改动了什么"></a>改动了什么</h4><p>问题的发生，通常与某些改动有关系，通过对比改动前后的差异，能大致确定排查的范围，或者通过不断回退改动，从而找到触发问题点的<strong>关键改动</strong>。</p>
<ul>
<li>改动点有哪些：归类列举改动点有哪些，全面暴露改动点，不放过任何细节，不让错误藏身</li>
<li>改动的思路是什么：如果改动点比较多，可以简述自己改动的方案是什么，让别人了解你的改动，评价方案的不足</li>
</ul>
<p>有时候改动与问题之间不是直接联系的，可能是某种异常的输入，导致其他模块出现问题，也要通盘考虑</p>
<h4 id="收集异常信息"><a href="#收集异常信息" class="headerlink" title="收集异常信息"></a>收集异常信息</h4><p>出现问题，必定是走了非正常逻辑，有没有异常日志、crash，或者其他反常之处。发现和收集异常信息，按图索骥。如果没能发现异常信息，在<strong>关键分支</strong>处，加上日志或断点，查看变量值，对象地址有无变化、有无null或者负值，发现异常点。</p>
<h4 id="定性分析，缩小范围"><a href="#定性分析，缩小范围" class="headerlink" title="定性分析，缩小范围"></a>定性分析，缩小范围</h4><p>是哪一块出现了问题，是网络，可以抓包，是数据库，可以拉取数据，是埋点找埋点，是ui找对应的view。根据这些推导，大致定位到具体模块，缩小问题的范围。</p>
<h4 id="基于事实，认真求证"><a href="#基于事实，认真求证" class="headerlink" title="基于事实，认真求证"></a>基于事实，认真求证</h4><p>在找原因的过程中，通常需要不断尝试，是否是这个原因，基于事实来求证和推理，切忌想当然去猜想，往往这些主观的猜想最后证明是错的。在没有思路的过程中，可以不断假设、一个个排除，但是得出的结论需要经过验证。有时也不需要每个都验证，根据已有的现象，通过简单的推理得出矛盾，也能说明不成立。</p>
<ul>
<li>大胆建设，认真求证</li>
<li>推理出矛盾</li>
<li>正向验证：从正面验证问题的矛盾</li>
<li>反向验证：从反向推理出矛盾</li>
</ul>
<p>假设一个个被求证，最后会慢慢缩小范围，一定是不断缩小求证的范围，不要扩大而去。沿着这个方向，问题总会被逼到死角。</p>
<h5 id="聚焦主线，逐步逼近"><a href="#聚焦主线，逐步逼近" class="headerlink" title="聚焦主线，逐步逼近"></a>聚焦主线，逐步逼近</h5><p>在分析问题过程，记着沿着解决问题的主线，不要被不断涌现出的新问题干扰，遇到新的问题，先记录，梳理下思路，解决完主要问题后，再来看这些新问题，逐步击破。不要在解决过程中被新问题干扰，忘记当初解决问题的主线。</p>
<h4 id="求助他人，集思广益"><a href="#求助他人，集思广益" class="headerlink" title="求助他人，集思广益"></a>求助他人，集思广益</h4><p>当没有思路时，拉群找更多相关的人来协助解决，自己往往由于经验不足，当局者迷，研究问题常会陷入死胡同，让更多的人参与，每个人看问题的角度不同，群策群力，会对问题解决有至关重要的作用。</p>
<h2 id="3-解决问题"><a href="#3-解决问题" class="headerlink" title="3. 解决问题"></a>3. 解决问题</h2><p>当原因找到了，接下来就是解决问题。问题不同，解决的方法各不相同，这里不介绍具体做法，而简单介绍几种思路。</p>
<h4 id="没有条件，创造条件"><a href="#没有条件，创造条件" class="headerlink" title="没有条件，创造条件"></a>没有条件，创造条件</h4><p>问题有时候是条件不具备导致的出错，可以通过各种方式来创造这个不满足的条件，缺啥补啥。比如是生命周期不完整导致，那就补齐这个生命周期。</p>
<h4 id="换个方向"><a href="#换个方向" class="headerlink" title="换个方向"></a>换个方向</h4><p>在原来道路上直接解决不好做，可以想下，能否换个方向？有没有其他方式绕过去，条条大路通罗马，不一定就用一种方法，往往换个思路，带来转机。</p>
<h4 id="善用搜索"><a href="#善用搜索" class="headerlink" title="善用搜索"></a>善用搜索</h4><p>自己遇到的问题，前辈可能都遇到过，多用搜索引擎，变换关键词，中文和英文，百度和谷歌等多种渠道去搜索，解决问题才是王道。</p>
<h2 id="4-总结问题"><a href="#4-总结问题" class="headerlink" title="4. 总结问题"></a>4. 总结问题</h2><p>每一个问题的解决，都有所收货，在解决完问题后，也可以思考下。对于特定的问题，能否泛化，找下共性。争取下次不再遇到，一劳永逸的解决问题。及时的把问题做好总结，分享出去，对自己也是一个成长。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>工作</tag>
        <tag>总结</tag>
      </tags>
  </entry>
</search>
