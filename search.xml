<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Mac OS在线重装系统</title>
    <url>/2021/07/25/Mac%20OS%E5%9C%A8%E7%BA%BF%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>本文介绍用网络在线的方式来安装Mac OS系统，网络安装是指从苹果官网下载系统并安装，它只需要联网即可，不需要制作U盘启动等，比较方便快捷</p>
<h3 id="1-进入系统安装页"><a href="#1-进入系统安装页" class="headerlink" title="1. 进入系统安装页"></a>1. 进入系统安装页</h3><p>在按下电源键之后，按住<strong>Command+R</strong>（为防止错过，可以先按键，再开机），会进入【macOS实用工具】界面</p>
<h3 id="2-用磁盘工具格式化磁盘"><a href="#2-用磁盘工具格式化磁盘" class="headerlink" title="2. 用磁盘工具格式化磁盘"></a>2. 用磁盘工具格式化磁盘</h3><p>磁盘工具进行格式化不是必须的，如果是新电脑，从来没有对系统盘做过格式化，或者重装的时候，想清除原来所有的文件，才需要选择磁盘工具。</p>
<p>在实用工具页面，点击【磁盘工具】，在左侧选择设备，点击 抹掉，</p>
<ul>
<li>名称 ：Macintosh HD</li>
<li>格式： Mac OS 扩展（日志式）或APFS</li>
<li>方案：GUID分区图</li>
</ul>
<p>点击抹掉，开始格式化，然后退出磁盘工具</p>
<span id="more"></span>

<blockquote>
<p>查看本机文件系统格式的方法：关于本机-概述-系统报告-储存</p>
</blockquote>
<h3 id="3-在线下载和安装"><a href="#3-在线下载和安装" class="headerlink" title="3. 在线下载和安装"></a>3. 在线下载和安装</h3><p>返回到实用工具主界面，选择【重新安装MacOS】，下一步，选择要安装的硬盘，点击安装，接下来就是漫长的下载和自动安装过程。<strong>务必要保证网络连通</strong>，看右上角网络的状态。</p>
<h3 id="4-系统常规设置"><a href="#4-系统常规设置" class="headerlink" title="4. 系统常规设置"></a>4. 系统常规设置</h3><p>一般默认就可以。</p>
<p>苹果键盘布局，选择美式英文，不选中文</p>
<p>输入法先默认ABC输入法，后面可以下载搜狗输入法</p>
<h3 id="5-遇到的问题"><a href="#5-遇到的问题" class="headerlink" title="5. 遇到的问题"></a>5. 遇到的问题</h3><ol>
<li><p>点击重置系统后，下一步，出现一个带问号的磁盘，不能点继续</p>
<p>说明磁盘没有格式化，需要进行格式化</p>
</li>
<li><p>点击安装系统，会报服务端错误</p>
<p>看右上角 wifi的信号是否连接，网上很多说是本地时间不对，和服务端校对不通过导致，但我的情况是因为网络没有连通，重新连接下就好了。进入系统时，虽然已经连接过，在这里还要再连接一次。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>Mac OS</tag>
        <tag>系统安装</tag>
      </tags>
  </entry>
  <entry>
    <title>在Centos上搭建shadowsocks服务</title>
    <url>/2021/04/05/%E5%9C%A8Centos%E4%B8%8A%E6%90%AD%E5%BB%BAshadowsocks%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<p>在搬瓦工上新购买的vps，系统默认安装的是centos7，所以下面教程是以Centos7为例，如果是Ubuntu，将yum换成apt-get即可</p>
<h4 id="1-首先安装epel扩展源，相当于第三方源，官方源比较滞后，会导致后面安装pip，提示-No-package-python-pip-available"><a href="#1-首先安装epel扩展源，相当于第三方源，官方源比较滞后，会导致后面安装pip，提示-No-package-python-pip-available" class="headerlink" title="1.首先安装epel扩展源，相当于第三方源，官方源比较滞后，会导致后面安装pip，提示-No-package-python-pip-available"></a>1.首先安装epel扩展源，相当于第三方源，官方源比较滞后，会导致后面安装pip，提示-No-package-python-pip-available</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure>

<h4 id="2-安装pip，pip-是-Python-的包管理工具"><a href="#2-安装pip，pip-是-Python-的包管理工具" class="headerlink" title="2. 安装pip，pip 是 Python 的包管理工具"></a>2. 安装pip，pip 是 Python 的包管理工具</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y python-pip</span><br></pre></td></tr></table></figure>

<p>如果仍然出现报错信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Loaded plugins: fastestmirror, ovl</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">...</span><br><span class="line">No package python-pip available.</span><br><span class="line">Error: Nothing to do</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>是因为开启fastestmirror导致，修改方法如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) vi /etc/yum/pluginconf.d/fastestmirror.conf</span><br><span class="line">然后enable=0 // 由1改成0，即禁用该插件</span><br><span class="line"></span><br><span class="line">(2)清除缓存并重新构建yum 源</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line"></span><br><span class="line">(3) 重新执行pip安装</span><br><span class="line">yum -y install python-pip</span><br></pre></td></tr></table></figure>

<h4 id="3-升级pip"><a href="#3-升级pip" class="headerlink" title="3. 升级pip"></a>3. 升级pip</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install --upgrade pip</span><br></pre></td></tr></table></figure>

<h4 id="4-pip安装shadowsocks"><a href="#4-pip安装shadowsocks" class="headerlink" title="4.  pip安装shadowsocks"></a>4.  pip安装shadowsocks</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure>

<h4 id="5-创建shadowsocks配置文件"><a href="#5-创建shadowsocks配置文件" class="headerlink" title="5. 创建shadowsocks配置文件"></a>5. 创建shadowsocks配置文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/shadowsocks.json</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;server&quot;: &quot;::&quot;,  #监听所有的ipv4和ipv6地址</span><br><span class="line">  &quot;server_port&quot;: 8888, #服务器端口号，1025到65535任选一。</span><br><span class="line">  &quot;password&quot;: &quot;xxx&quot;, #设置登录密码。</span><br><span class="line">  &quot;timeout&quot;:300, #等待超时</span><br><span class="line">  &quot;method&quot;: &quot;rc4-md5&quot;, #加密方式，官方默认使用aes-256-cfb，推荐使用rc4-md5，因为 RC4比AES速度快</span><br><span class="line">  &quot;fast_open&quot;:true, #如果你的服务器 Linux 内核在3.7+，可以开启 fast_open 以降低延迟</span><br><span class="line">  &quot;workers&quot;: 3 #工作线程数，默认为1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看linux内核信息 <code>uname -r</code></p>
</blockquote>
<h4 id="6-启动shadowsocks"><a href="#6-启动shadowsocks" class="headerlink" title="6. 启动shadowsocks"></a>6. 启动shadowsocks</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d start</span><br></pre></td></tr></table></figure>

<blockquote>
<p>-d 表示后台运行</p>
</blockquote>
<p>还有两种常用的操作</p>
<ul>
<li>停止</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d stop</span><br></pre></td></tr></table></figure>

<ul>
<li>重启(如果修改了配置文件，需要重启服务才生效))</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d stop</span><br></pre></td></tr></table></figure>

<h4 id="7-启动成功后，用telnet查看端口是否打开"><a href="#7-启动成功后，用telnet查看端口是否打开" class="headerlink" title="7. 启动成功后，用telnet查看端口是否打开"></a>7. 启动成功后，用telnet查看端口是否打开</h4><p>打开cmd，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">telnet ip地址 端口号</span><br></pre></td></tr></table></figure>

<p>如果进入命令行，说明打开。如果提示 无法打开主机的连接，则说明未打开端口</p>
<blockquote>
<p>win7默认没有打开telnet服务，从控制面板-程序-打开或关闭Windows功能，勾选Telnet服务器和Telnet客户端</p>
</blockquote>
<h4 id="8-客户端安装Shadowsocks，设置IP地址、端口号，加密方式，访问www-google-com看是否能连接成功"><a href="#8-客户端安装Shadowsocks，设置IP地址、端口号，加密方式，访问www-google-com看是否能连接成功" class="headerlink" title="8.  客户端安装Shadowsocks，设置IP地址、端口号，加密方式，访问www.google.com看是否能连接成功"></a>8.  客户端安装Shadowsocks，设置IP地址、端口号，加密方式，访问<code>www.google.com</code>看是否能连接成功</h4><p>扩展阅读：Privoxy，BBR加速</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title>加入新项目，如何快速阅读App源码</title>
    <url>/2021/09/12/%E5%8A%A0%E5%85%A5%E6%96%B0%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E9%98%85%E8%AF%BBApp%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<p>做移动端开发，难免会因工作变动，加入一个新的项目组。而到了新项目组，首先要面临一个必备工作，<strong>阅读项目源码</strong>。如何有条理、快速的了解新项目的架构和业务，分享自己的一些心得。</p>
<p>应用代码可以分层来阅读，比如分成<strong>界面展示层</strong>、<strong>逻辑控制层</strong>和<strong>业务数据层</strong>，也就是Model-View-Controller/Presenter分层结构，在每层借助的工具和阅读的重点各有不同，下面分别介绍</p>
<span id="more"></span>

<h2 id="界面展示层"><a href="#界面展示层" class="headerlink" title="界面展示层"></a>界面展示层</h2><blockquote>
<p>借助工具：logcat和Layout Inspector</p>
</blockquote>
<p>页面UI是最直观的视觉元素，是业务功能的具体表现，也是阅读项目源码很好的入口，Android中的UI主要是由Activity、Fragment、View等组件构成的，了解的顺序也是从Activity、Fragment再到具体的View。</p>
<h4 id="动手操作业务主流程，了解页面之间的跳转（Activity层次）"><a href="#动手操作业务主流程，了解页面之间的跳转（Activity层次）" class="headerlink" title="动手操作业务主流程，了解页面之间的跳转（Activity层次）"></a>动手操作业务主流程，了解页面之间的跳转（Activity层次）</h4><p>业务主流程是指app主打功能，比如，如果是购物app，就是浏览-&gt;加购-&gt;下单-&gt;支付，如果是短视频app，就是浏览-&gt;发帖。在Android Studio（以下简称AS）中打开logcat，过滤”displayed “ 关键字，然后操作主流程，看下依次经历哪些Activity的切换，分别记录下来。</p>
<p><img src="/images/%E5%8A%A0%E5%85%A5%E6%96%B0%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E9%98%85%E8%AF%BBApp%E6%BA%90%E7%A0%81/logcat-displayed.png" alt="logcat-displayed"></p>
<h4 id="分析每个页面的布局组织层次（View层次）"><a href="#分析每个页面的布局组织层次（View层次）" class="headerlink" title="分析每个页面的布局组织层次（View层次）"></a>分析每个页面的布局组织层次（View层次）</h4><p>在上一步中记录的各个Activity，还需要分析它们的页面布局，是一个RecycleView组成的滑动列表，还是一个ViewPager构成的tab切换，还是多个Fragment的嵌套，在AS中打开Layout Inspector来分析页面结构，查看各个View层次结构，对整个页面结构有个整体认识，同时找到对应的布局xml文件。找xml文件，可以在Activity和Fragment直接搜索R.layout.，或者根据前面Inspector，可以根据自定义view类名，或者view id来全局搜索。</p>
<p><img src="/images/%E5%8A%A0%E5%85%A5%E6%96%B0%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E9%98%85%E8%AF%BBApp%E6%BA%90%E7%A0%81/layoutinspector.png" alt="layoutinspector"></p>
<h2 id="逻辑控制层"><a href="#逻辑控制层" class="headerlink" title="逻辑控制层"></a>逻辑控制层</h2><blockquote>
<p>借助工具：Android Studio Debug</p>
</blockquote>
<p>逻辑控制层介于界面层和数据层之间，主要负责业务流程的轮转，类名大多为XXController或者XXPresenter，XXManager等等。从Activity找到布局按钮，在它的onClick中断点来一步步调试、跟进。</p>
<p>断点有两种方式，一种是入口处，比如onClick，来跟踪后面的处理。一种是出口或者关卡处，比如bindData，但是不知道从哪里来触发，在出口处断点，往上去找。AS中断点堆栈可以复制下来，方便做流程时序图用。</p>
<p><img src="/images/%E5%8A%A0%E5%85%A5%E6%96%B0%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E9%98%85%E8%AF%BBApp%E6%BA%90%E7%A0%81/%E8%B0%83%E8%AF%95.png" alt="调试"></p>
<p>通常逻辑层中，会涉及到一些消息的传递，比如广播，event事件总线，Message，这些都是基于观察者模式，并且是异步的，无法顺序跟踪，不是很方便。可以多用shift+F全局搜索，比如搜索Action，找到广播接受者，通过event id，来找到订阅者、通过Message what，找到Handler处理者。</p>
<p>还有很多时候，会通过callback或者listener来回调到UI层，多注意下这些对象。</p>
<h2 id="业务数据层"><a href="#业务数据层" class="headerlink" title="业务数据层"></a>业务数据层</h2><blockquote>
<p> 借助工具：抓包charles</p>
</blockquote>
<p>数据的来源有网络、数据库、内存，文件。一般Java对象命名为XXDao，XXProvider，XXCache</p>
<p>对于网络数据，可以通过charles抓包工具，知道接口名，返回数据格式，并对数据进行以下分析，</p>
<ul>
<li>入参有哪些</li>
<li>是增量数据还是全量数据</li>
<li>有没有一些固定的协议，协议各个字段代码的含义</li>
<li>哪些是业务数据，哪些是埋点、实验等数据</li>
</ul>
<p>然后再来找数据的解析器，是怎样把原始数据一步步转换成ui对象的，有没有对数据做额外处理，各种数据对象表示的含义是什么，相互之间的关系</p>
<h2 id="其他模块"><a href="#其他模块" class="headerlink" title="其他模块"></a>其他模块</h2><p>除了上面列出的3个方面，其实app中还包含很多其他模块比如</p>
<ul>
<li><p>埋点：业务是怎样埋点的，页面埋点，点击埋点，曝光埋点，自定义埋点是怎样区分的</p>
</li>
<li><p>图片库和视频：图片库怎样使用，怎样加载动图，视频组件是怎样使用的</p>
</li>
<li><p>实验：怎样激活实验，验证实验效果</p>
</li>
<li><p>开关：端上的开关怎样使用</p>
</li>
</ul>
<h2 id="反编译利器"><a href="#反编译利器" class="headerlink" title="反编译利器"></a>反编译利器</h2><p>现在都是组件化开发，有些三方aar接入，Android studio不容易搜索到源码，可以借助反编译工具jadx</p>
<blockquote>
<p>借助工具：jadx</p>
</blockquote>
<p>根据类名、字符串来进行全局搜索，</p>
<p><img src="/images/%E5%8A%A0%E5%85%A5%E6%96%B0%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E9%98%85%E8%AF%BBApp%E6%BA%90%E7%A0%81/%E5%8F%8D%E7%BC%96%E8%AF%91%E6%90%9C%E7%B4%A2.png" alt="反编译搜索"></p>
<p>右键通过查看声明，来找到定义的地方，查看用例，来找到使用的地方，顺着引用链路，来一层层找到调用地方。</p>
<p><img src="/images/%E5%8A%A0%E5%85%A5%E6%96%B0%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E9%98%85%E8%AF%BBApp%E6%BA%90%E7%A0%81/%E5%8F%8D%E7%BC%96%E8%AF%91%E6%9F%A5%E6%89%BE%E7%94%A8%E4%BE%8B.png" alt="反编译查找用例"></p>
<h2 id="带着问题去阅读"><a href="#带着问题去阅读" class="headerlink" title="带着问题去阅读"></a>带着问题去阅读</h2><p>在阅读之前，先提出几个问题，列出list，然后逐个解决，顺着问题来阅读，不至于迷失方向，没有目标。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>App</tag>
        <tag>源码</tag>
        <tag>新项目</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>新的开始</title>
    <url>/2021/04/05/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</url>
    <content><![CDATA[<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>用了两天时间，把博客升级为最新的NexT主题，发现样式更简洁，第三方功能更全，配置更为简单。从2016年毕业后，文章基本没有更新，还是一些之前零零散散的文章。这次借升级，也把之前陈旧的文章都删除，打算重新开始写。</p>
<h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>转眼毕业快5年，发现沉淀记录的不多。如果说前3年，还是以学习输入为主，那么从5年开始，应该有所输出，通过输出倒逼输入，也能锻炼自己文字总结和表达能力，以博客为载体，希望以后能多些记录和沉淀。</p>
<span id="more"></span>
<h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h2><p>以后，会在博客中记录Android技术，源码阅读，工作方法等方面的内容。文章以短文为主，内容较多的，要分成多给章节，方便碎片化的时间阅读，也不至于阅读枯燥。2021，一起加油~</p>
]]></content>
      <categories>
        <category>日志</category>
        <category>第一天</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>我的</tag>
      </tags>
  </entry>
</search>
